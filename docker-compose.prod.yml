version: '3.8'

services:
  # Reverse Proxy Nginx
  nginx:
    image: nginx:alpine
    container_name: cipfaro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - web_static:/var/www/static:ro
    depends_on:
      - web
      - api
    networks:
      - cipfaro-network
    restart: unless-stopped

  # Frontend Next.js
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: cipfaro-web
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_BASE_URL=https://cipfaro.fr/api
      - PORT=3000
    volumes:
      - web_static:/app/apps/web/.next/static
    networks:
      - cipfaro-network
    restart: unless-stopped
    depends_on:
      - api

  # Backend Express.js API
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
    container_name: cipfaro-api
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=https://cipfaro.fr
      - PORT=3001
      - UPLOAD_DIR=/app/uploads
    volumes:
      - api_uploads:/app/uploads
    networks:
      - cipfaro-network
    restart: unless-stopped
    depends_on:
      - postgres

  # Base de donn√©es PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: cipfaro-db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-cipfaro}
      - POSTGRES_USER=${POSTGRES_USER:-cipfaro}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - cipfaro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-cipfaro}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis pour les sessions (optionnel)
  redis:
    image: redis:7-alpine
    container_name: cipfaro-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - cipfaro-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_uploads:
    driver: local
  web_static:
    driver: local

networks:
  cipfaro-network:
    driver: bridge