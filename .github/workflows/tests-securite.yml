name: 🧪 CIPFARO V2 - Tests et Sécurité

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '9.6.0'

jobs:
  # Tests unitaires et d'intégration
  tests-unitaires:
    runs-on: ubuntu-latest
    name: 🔬 Tests Unitaires & Intégration
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: 📦 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🔨 Build applications
      run: pnpm build
      
    - name: 🧪 Run unit tests
      run: pnpm test:ci
      
    - name: 📊 Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
  # Tests end-to-end
  tests-e2e:
    runs-on: ubuntu-latest
    name: 🎭 Tests End-to-End
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: 📦 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🎭 Install Playwright
      run: pnpm playwright:install
      
    - name: 🔨 Build applications
      run: pnpm build
      
    - name: 🎭 Run E2E tests
      run: pnpm test:e2e
      env:
        CI: true
        
    - name: 📦 Upload E2E artifacts
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30

  # Scan de sécurité
  securite:
    runs-on: ubuntu-latest
    name: 🔒 Scan de Sécurité
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: 📦 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🔍 ESLint Security Scan
      run: pnpm lint
      
    - name: 🔍 Dependencies Audit
      run: pnpm audit --audit-level moderate
      
    - name: 🔒 Security Scan complet
      run: pnpm security:scan
      
    - name: 📦 Upload security report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-report
        path: security-report.json
        retention-days: 90

  # Quality checks
  qualite:
    runs-on: ubuntu-latest
    name: ✨ Contrôle Qualité
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: 📦 Setup pnpm
      uses: pnpm/action-setup@v4
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: 📦 Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: 🔍 TypeScript check
      run: pnpm -r exec tsc --noEmit
      
    - name: 📏 Code formatting
      run: npx prettier --check "**/*.{ts,tsx,js,jsx,json,md}"
      
    - name: 📊 Bundle analysis
      run: |
        pnpm build
        npx bundlesize

  # Résumé des résultats
  resultats:
    if: always()
    needs: [tests-unitaires, tests-e2e, securite, qualite]
    runs-on: ubuntu-latest
    name: 📋 Résumé des Tests
    
    steps:
    - name: 📊 Check results
      run: |
        echo "Tests unitaires: ${{ needs.tests-unitaires.result }}"
        echo "Tests E2E: ${{ needs.tests-e2e.result }}"
        echo "Sécurité: ${{ needs.securite.result }}"
        echo "Qualité: ${{ needs.qualite.result }}"
        
        if [[ "${{ needs.tests-unitaires.result }}" == "success" && 
              "${{ needs.tests-e2e.result }}" == "success" && 
              "${{ needs.securite.result }}" == "success" && 
              "${{ needs.qualite.result }}" == "success" ]]; then
          echo "✅ Tous les tests sont passés!"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Certains tests ont échoué"
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1
        fi
        
    - name: 🎉 Success notification
      if: steps.check.outputs.status == 'success'
      run: |
        echo "🎉 Pipeline CIPFARO V2 - Tous les tests réussis!"
        echo "✅ Tests unitaires et d'intégration: OK"
        echo "✅ Tests end-to-end: OK" 
        echo "✅ Scan de sécurité: OK"
        echo "✅ Contrôle qualité: OK"