#!/bin/bash

# =============================================================================
# Script de D√©ploiement CIPFARO E-Learning - Sous-domaine
# D√©ploie sur elearning.cipfaro.fr en pr√©servant WordPress sur cipfaro.fr
# =============================================================================

set -e  # Arr√™t du script en cas d'erreur

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DOMAIN="elearning.cipfaro.fr"
MAIN_DOMAIN="cipfaro.fr"
PROJECT_DIR="/opt/cipfaro-elearning"
COMPOSE_FILE="docker-compose.elearning.yml"
ENV_FILE=".env.production"

echo -e "${BLUE}üöÄ D√©ploiement CIPFARO E-Learning sur sous-domaine ${DOMAIN}${NC}"
echo -e "${YELLOW}üìã Cette installation pr√©serve le WordPress existant sur ${MAIN_DOMAIN}${NC}"
echo

# =============================================================================
# 1. V√©rifications pr√©liminaires
# =============================================================================

echo -e "${BLUE}üîç V√©rifications pr√©liminaires...${NC}"

# V√©rifier que nous sommes connect√©s en SSH
if [ -z "$SSH_CLIENT" ] && [ -z "$SSH_TTY" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Il est recommand√© d'ex√©cuter ce script via SSH${NC}"
fi

# V√©rifier les pr√©requis syst√®me
command -v docker >/dev/null 2>&1 || { echo -e "${RED}‚ùå Docker non install√©${NC}"; exit 1; }
command -v docker-compose >/dev/null 2>&1 || { echo -e "${RED}‚ùå Docker Compose non install√©${NC}"; exit 1; }
command -v git >/dev/null 2>&1 || { echo -e "${RED}‚ùå Git non install√©${NC}"; exit 1; }

# V√©rifier que le site WordPress principal est accessible
echo "üîç V√©rification du site WordPress principal..."
if curl -s -o /dev/null -w "%{http_code}" "https://$MAIN_DOMAIN" | grep -q "200"; then
    echo -e "${GREEN}‚úÖ WordPress sur $MAIN_DOMAIN est accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  WordPress sur $MAIN_DOMAIN n'est pas accessible${NC}"
    read -p "Voulez-vous continuer ? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

echo -e "${GREEN}‚úÖ Pr√©requis v√©rifi√©s${NC}"
echo

# =============================================================================
# 2. Pr√©paration des r√©pertoires
# =============================================================================

echo -e "${BLUE}üìÅ Pr√©paration des r√©pertoires...${NC}"

# Cr√©er le r√©pertoire projet
sudo mkdir -p $PROJECT_DIR
sudo chown -R $USER:$USER $PROJECT_DIR

# Cr√©er les r√©pertoires pour les donn√©es
mkdir -p $PROJECT_DIR/{uploads/elearning,backups/elearning,nginx/ssl,public/elearning/scorm}

echo -e "${GREEN}‚úÖ R√©pertoires cr√©√©s${NC}"
echo

# =============================================================================
# 3. Clonage du repository
# =============================================================================

echo -e "${BLUE}üì• R√©cup√©ration du code...${NC}"

if [ -d "$PROJECT_DIR/.git" ]; then
    echo "üì• Mise √† jour du repository existant..."
    cd $PROJECT_DIR
    git fetch origin
    git reset --hard origin/deployment/lws
    git pull origin deployment/lws
else
    echo "üì• Clonage du repository..."
    git clone -b deployment/lws https://github.com/cipfarorudy/cipfaro-elearning.git $PROJECT_DIR
    cd $PROJECT_DIR
fi

echo -e "${GREEN}‚úÖ Code r√©cup√©r√©${NC}"
echo

# =============================================================================
# 4. Configuration des variables d'environnement
# =============================================================================

echo -e "${BLUE}‚öôÔ∏è  Configuration des variables d'environnement...${NC}"

# Copier le fichier d'exemple
cp .env.elearning.example $ENV_FILE

# G√©n√©rer des cl√©s s√©curis√©es
JWT_SECRET=$(openssl rand -base64 32)
ENCRYPTION_KEY=$(openssl rand -base64 32)
POSTGRES_PASSWORD=$(openssl rand -base64 16)
REDIS_PASSWORD=$(openssl rand -base64 16)

# Remplacer les valeurs dans le fichier .env
sed -i "s/VOTRE_MOT_DE_PASSE_POSTGRES/$POSTGRES_PASSWORD/g" $ENV_FILE
sed -i "s/VOTRE_CLE_JWT_SECRETE_ELEARNING_32_CARACTERES/$JWT_SECRET/g" $ENV_FILE
sed -i "s/VOTRE_CLE_CHIFFREMENT_ELEARNING_32_CARACTERES/$ENCRYPTION_KEY/g" $ENV_FILE

# Ajouter le mot de passe Redis
echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> $ENV_FILE

echo -e "${GREEN}‚úÖ Variables d'environnement configur√©es${NC}"
echo

# =============================================================================
# 5. Configuration du serveur web
# =============================================================================

echo -e "${BLUE}üåê Configuration du serveur web...${NC}"

# D√©tecter le serveur web utilis√©
if systemctl is-active --quiet apache2; then
    WEB_SERVER="apache2"
    echo "üîç Apache d√©tect√©"
elif systemctl is-active --quiet nginx; then
    WEB_SERVER="nginx"
    echo "üîç Nginx d√©tect√©"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucun serveur web d√©tect√©${NC}"
    echo "Quelle configuration souhaitez-vous ?"
    echo "1) Apache"
    echo "2) Nginx"
    read -p "Choix (1-2): " choice
    case $choice in
        1) WEB_SERVER="apache2" ;;
        2) WEB_SERVER="nginx" ;;
        *) echo -e "${RED}‚ùå Choix invalide${NC}"; exit 1 ;;
    esac
fi

# Configuration Apache
if [ "$WEB_SERVER" = "apache2" ]; then
    echo "‚öôÔ∏è  Configuration Apache pour $DOMAIN..."
    
    # Activer les modules n√©cessaires
    sudo a2enmod proxy proxy_http ssl rewrite
    
    # Cr√©er le virtual host
    sudo tee /etc/apache2/sites-available/$DOMAIN.conf > /dev/null <<EOF
<VirtualHost *:80>
    ServerName $DOMAIN
    Redirect permanent / https://$DOMAIN/
</VirtualHost>

<VirtualHost *:443>
    ServerName $DOMAIN
    
    SSLEngine on
    SSLCertificateFile /etc/letsencrypt/live/$MAIN_DOMAIN/fullchain.pem
    SSLCertificateKeyFile /etc/letsencrypt/live/$MAIN_DOMAIN/privkey.pem
    
    ProxyPreserveHost On
    ProxyPass / http://localhost:3001/
    ProxyPassReverse / http://localhost:3001/
    
    # Logs sp√©cifiques
    ErrorLog \${APACHE_LOG_DIR}/${DOMAIN}_error.log
    CustomLog \${APACHE_LOG_DIR}/${DOMAIN}_access.log combined
</VirtualHost>
EOF
    
    # Activer le site
    sudo a2ensite $DOMAIN.conf
    sudo systemctl reload apache2

# Configuration Nginx
elif [ "$WEB_SERVER" = "nginx" ]; then
    echo "‚öôÔ∏è  Configuration Nginx pour $DOMAIN..."
    
    # Cr√©er le virtual host
    sudo tee /etc/nginx/sites-available/$DOMAIN > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN;
    return 301 https://\$server_name\$request_uri;
}

server {
    listen 443 ssl;
    server_name $DOMAIN;
    
    ssl_certificate /etc/letsencrypt/live/$MAIN_DOMAIN/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/$MAIN_DOMAIN/privkey.pem;
    
    # Configuration SSL moderne
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    
    # Headers de s√©curit√©
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    location / {
        proxy_pass http://localhost:3001;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        
        # Support WebSocket
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Logs sp√©cifiques
    access_log /var/log/nginx/${DOMAIN}_access.log;
    error_log /var/log/nginx/${DOMAIN}_error.log;
}
EOF
    
    # Activer le site
    sudo ln -sf /etc/nginx/sites-available/$DOMAIN /etc/nginx/sites-enabled/
    sudo nginx -t && sudo systemctl reload nginx
fi

echo -e "${GREEN}‚úÖ Configuration serveur web termin√©e${NC}"
echo

# =============================================================================
# 6. D√©ploiement Docker
# =============================================================================

echo -e "${BLUE}üê≥ D√©ploiement des containers Docker...${NC}"

# Arr√™ter les containers existants s'ils existent
if [ -f "$COMPOSE_FILE" ]; then
    docker-compose -f $COMPOSE_FILE down 2>/dev/null || true
fi

# Construire et d√©marrer les containers
docker-compose -f $COMPOSE_FILE up -d --build

echo "‚è≥ Attente du d√©marrage des services..."
sleep 30

# V√©rifier que les containers sont d√©marr√©s
docker-compose -f $COMPOSE_FILE ps

echo -e "${GREEN}‚úÖ Containers d√©ploy√©s${NC}"
echo

# =============================================================================
# 7. Initialisation de la base de donn√©es
# =============================================================================

echo -e "${BLUE}üóÑÔ∏è  Initialisation de la base de donn√©es...${NC}"

# Attendre que PostgreSQL soit pr√™t
echo "‚è≥ Attente de PostgreSQL..."
until docker-compose -f $COMPOSE_FILE exec -T postgres pg_isready -U elearning_user; do
    sleep 2
done

# Ex√©cuter les migrations Prisma
echo "üîÑ Ex√©cution des migrations..."
docker-compose -f $COMPOSE_FILE exec -T api npx prisma migrate deploy

# Optionnel : Seed de donn√©es de test
read -p "Voulez-vous ins√©rer des donn√©es de test ? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose -f $COMPOSE_FILE exec -T api npx prisma db seed
fi

echo -e "${GREEN}‚úÖ Base de donn√©es initialis√©e${NC}"
echo

# =============================================================================
# 8. Configuration des sauvegardes
# =============================================================================

echo -e "${BLUE}üíæ Configuration des sauvegardes automatiques...${NC}"

# Script de sauvegarde
sudo tee /usr/local/bin/backup-elearning.sh > /dev/null <<EOF
#!/bin/bash
BACKUP_DIR="$PROJECT_DIR/backups/elearning"
DATE=\$(date +"%Y%m%d_%H%M%S")

# Sauvegarde base de donn√©es
docker-compose -f $PROJECT_DIR/$COMPOSE_FILE exec -T postgres pg_dump -U elearning_user elearning_cipfaro > "\$BACKUP_DIR/db_\$DATE.sql"

# Sauvegarde des uploads
tar -czf "\$BACKUP_DIR/uploads_\$DATE.tar.gz" -C "$PROJECT_DIR" uploads/elearning

# Nettoyage (garder 7 jours)
find "\$BACKUP_DIR" -name "*.sql" -mtime +7 -delete
find "\$BACKUP_DIR" -name "*.tar.gz" -mtime +7 -delete

echo "Sauvegarde elearning termin√©e: \$DATE"
EOF

sudo chmod +x /usr/local/bin/backup-elearning.sh

# Cron job pour sauvegardes automatiques (3h du matin)
(crontab -l 2>/dev/null; echo "0 3 * * * /usr/local/bin/backup-elearning.sh >> /var/log/backup-elearning.log 2>&1") | crontab -

echo -e "${GREEN}‚úÖ Sauvegardes automatiques configur√©es${NC}"
echo

# =============================================================================
# 9. Tests de validation
# =============================================================================

echo -e "${BLUE}üß™ Tests de validation...${NC}"

# Test des services
echo "üîç V√©rification des services..."

# Attendre que les services soient pr√™ts
sleep 10

# Test health check API
echo "üîç Test API health check..."
if curl -s -f "http://localhost:3001/health" > /dev/null; then
    echo -e "${GREEN}‚úÖ API accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  API non accessible${NC}"
fi

# Test DNS du sous-domaine
echo "üîç Test r√©solution DNS..."
if nslookup $DOMAIN | grep -q "193.37.145.82"; then
    echo -e "${GREEN}‚úÖ DNS r√©solu correctement${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  DNS non r√©solu ou incorrect${NC}"
fi

# Test du site principal (WordPress)
echo "üîç Test site WordPress principal..."
if curl -s -o /dev/null -w "%{http_code}" "https://$MAIN_DOMAIN" | grep -q "200"; then
    echo -e "${GREEN}‚úÖ WordPress principal accessible${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  WordPress principal non accessible${NC}"
fi

echo -e "${GREEN}‚úÖ Tests de validation termin√©s${NC}"
echo

# =============================================================================
# 10. R√©sum√© et instructions finales
# =============================================================================

echo -e "${GREEN}üéâ D√©ploiement CIPFARO E-Learning termin√© !${NC}"
echo
echo -e "${BLUE}üìã R√©sum√© de l'installation :${NC}"
echo -e "  üåê Site principal (WordPress) : https://$MAIN_DOMAIN"
echo -e "  üöÄ Plateforme e-learning : https://$DOMAIN"
echo -e "  üìÅ R√©pertoire projet : $PROJECT_DIR"
echo -e "  üê≥ Containers : $(docker-compose -f $COMPOSE_FILE ps --services | wc -l) services"
echo -e "  üíæ Sauvegardes : Quotidiennes √† 3h du matin"
echo
echo -e "${YELLOW}üìã Prochaines √©tapes :${NC}"
echo "1. V√©rifiez que https://$DOMAIN est accessible"
echo "2. V√©rifiez que https://$MAIN_DOMAIN fonctionne toujours"
echo "3. Configurez les utilisateurs administrateurs"
echo "4. Testez l'upload de modules SCORM"
echo "5. Configurez la sauvegarde externe (optionnel)"
echo
echo -e "${BLUE}üîß Commandes utiles :${NC}"
echo "  üìä √âtat des services : docker-compose -f $PROJECT_DIR/$COMPOSE_FILE ps"
echo "  üìã Logs temps r√©el : docker-compose -f $PROJECT_DIR/$COMPOSE_FILE logs -f"
echo "  üîÑ Red√©marrage : docker-compose -f $PROJECT_DIR/$COMPOSE_FILE restart"
echo "  üõë Arr√™t : docker-compose -f $PROJECT_DIR/$COMPOSE_FILE down"
echo "  üíæ Sauvegarde manuelle : /usr/local/bin/backup-elearning.sh"
echo
echo -e "${GREEN}üá´üá∑ Votre plateforme CIPFARO E-Learning est maintenant d√©ploy√©e sur LWS !${NC}"
echo -e "${BLUE}Support : https://aide.lws.fr/ | Email : admin@cipfaro.fr${NC}"