networks:
  cipfaro:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  minio_data:
  prometheus_data:
  grafana_data:

services:
  postgres:
    image: postgres:16-alpine
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-cipfaro}
      POSTGRES_USER: ${POSTGRES_USER:-cipfaro}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [cipfaro]

  redis:
    image: redis:7-alpine
    command: ["redis-server","--appendonly","yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks: [cipfaro]

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-admin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-adminadmin}
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9002:9001" # Console sur port 9002 pour eviter conflit
    networks: [cipfaro]

  minio-setup:
    image: minio/mc:latest
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
        mc alias set minio http://minio:9000 ${MINIO_ROOT_USER:-admin} ${MINIO_ROOT_PASSWORD:-adminadmin} &&
        mc mb -p minio/${MINIO_BUCKET:-scorm} || true &&
        mc policy set public minio/${MINIO_BUCKET:-scorm} || true
      "
    networks: [cipfaro]

  api:
    # Image à builder depuis ./apps/api (Express/Prisma)
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    env_file: .env
    environment:
      PORT: 4000
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL:-postgresql://cipfaro:changeme@postgres:5432/cipfaro?schema=public}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      S3_ENDPOINT: http://minio:9000
      S3_BUCKET: ${MINIO_BUCKET:-scorm}
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-admin}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD:-adminadmin}
      S3_USE_SSL: "false"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      minio-setup:
        condition: service_completed_successfully
    ports:
      - "4000:4000" # utile en dev
    networks: [cipfaro]

  web:
    # Image à builder depuis ./apps/web (Next.js)
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    env_file: .env
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_BASE_URL: http://localhost/api
    depends_on:
      api:
        condition: service_started
    ports:
      - "3000:3000"
    networks: [cipfaro]

  nginx:
    image: nginx:alpine
    depends_on:
      - web
      - api
    ports:
      - "80:80"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks: [cipfaro]

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks: [cipfaro]

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin@cipfaro.fr
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_SECURITY_ADMIN_EMAIL: admin@cipfaro.fr
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_USERS_ALLOW_ORG_CREATE: "false"
      GF_AUTH_ANONYMOUS_ENABLED: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks: [cipfaro]
