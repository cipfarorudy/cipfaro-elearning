# Plan de Déploiement Azure - Plateforme CIPFARO E-Learning

## **Objectif**
Déployer la plateforme e-learning CIPFARO sur Azure avec le domaine cipfaro.fr, en utilisant les meilleures pratiques de sécurité et de scalabilité.

## **Analyse du Projet**

### **Applications Détectées**
1. **Application Web Frontend** (@cipfaro/web)
   - **Technologie** : Next.js 14 avec React 18, TypeScript
   - **Type** : Application SPA avec SSR
   - **Port** : 3000
   - **Docker** : `apps/web/Dockerfile` (multi-stage build)
   - **Dépendances** : lucide-react, framer-motion, scorm-runtime

2. **API Backend** (@cipfaro/api)
   - **Technologie** : Node.js avec Express.js, TypeScript
   - **Type** : API REST avec authentification JWT
   - **Port** : 3001
   - **Docker** : `apps/api/Dockerfile` (multi-stage build)
   - **Dépendances** : PostgreSQL, S3/MinIO, Prisma ORM

3. **Base de Données**
   - **Type** : PostgreSQL
   - **ORM** : Prisma avec schéma dans `infra/prisma/`
   - **Features** : JWT auth, RBAC, audit logs, SCORM packages

4. **Stockage Fichiers**
   - **Type** : Stockage objet (S3/MinIO)
   - **Utilisation** : Packages SCORM, uploads

### **Architecture Cible Azure**

```mermaid
graph TB
    Internet[Internet/Users] --> AppGW[Application Gateway]
    AppGW --> WebApp[Azure Web App - Frontend]
    AppGW --> APIApp[Azure Web App - API]
    
    APIApp --> DB[(Azure Database for PostgreSQL)]
    APIApp --> Storage[Azure Storage Account]
    APIApp --> KeyVault[Azure Key Vault]
    
    WebApp --> CDN[Azure CDN]
    
    Monitor[Application Insights] --> WebApp
    Monitor --> APIApp
    
    CustomDomain[cipfaro.fr] --> AppGW
```

### **Flux de Données**
- **Frontend** : L'Application Gateway route les requêtes vers le Web App Next.js
- **API** : Les appels API sont routés vers l'API Express.js 
- **Base de Données** : L'API se connecte à PostgreSQL via Managed Identity
- **Stockage** : Les fichiers SCORM sont stockés dans Azure Storage
- **Sécurité** : Les secrets sont stockés dans Key Vault
- **Monitoring** : Application Insights collecte les métriques et logs

## **Ressources Azure Recommandées**

### **Services d'Hébergement**

#### **Application Frontend (CIPFARO Web)**
- **Service** : Azure Web App Service
- **SKU** : P1V3 (1 vCore, 3.5 GB RAM) - Production ready avec SSL automatique
- **Configuration** :
  - **Langage** : Node.js 18 LTS
  - **dockerFilePath** : apps/web/Dockerfile
  - **dockerContext** : .
  - **Variables d'environnement** :
    - `NEXT_PUBLIC_API_BASE_URL`
    - `NEXT_PUBLIC_GITHUB_URL`

#### **Application API Backend (CIPFARO API)**
- **Service** : Azure Web App Service  
- **SKU** : P2V3 (2 vCores, 7 GB RAM) - Pour les charges de base de données
- **Configuration** :
  - **Langage** : Node.js 18 LTS
  - **dockerFilePath** : apps/api/Dockerfile
  - **dockerContext** : .
  - **Variables d'environnement** :
    - `DATABASE_URL`
    - `JWT_SECRET`
    - `S3_ENDPOINT`
    - `S3_BUCKET`
    - `NODE_ENV=production`

### **Services de Données et Stockage**

#### **Base de Données PostgreSQL**
- **Service** : Azure Database for PostgreSQL Flexible Server
- **SKU** : Standard_B2s (2 vCores, 4 GB RAM, 32 GB storage)
- **Configuration** :
  - Version PostgreSQL 15
  - Backup automatique 7 jours
  - High Availability (optionnel)
- **Type de Connexion** : Managed Identity + connection string sécurisée
- **Variables d'environnement** :
  - `DATABASE_URL` (stockée dans Key Vault)

#### **Stockage Fichiers**
- **Service** : Azure Storage Account (General Purpose v2)
- **SKU** : Standard_LRS (stockage local redondant)
- **Configuration** :
  - Container Blob pour packages SCORM
  - CDN endpoint pour performance
- **Type de Connexion** : Managed Identity
- **Variables d'environnement** :
  - `S3_ENDPOINT`
  - `S3_BUCKET`

### **Services de Support**

#### **Monitoring et Logs**
- **Application Insights** : Pour monitoring applicatif
- **Log Analytics Workspace** : Centralisation des logs
- **Configuration** : Connecté aux deux Web Apps

#### **Sécurité**
- **Azure Key Vault** : Pour stocker les secrets
  - Connection string PostgreSQL
  - JWT secret
  - Clés de stockage
- **Managed Identity** : Assignée aux Web Apps pour accès sécurisé

#### **Réseau et DNS**
- **Application Gateway** : Point d'entrée avec SSL/TLS
- **Azure DNS Zone** : Gestion du domaine cipfaro.fr
- **SSL Certificate** : Certificat automatique Let's Encrypt ou Azure

### **Configuration Sécurité**

#### **Identités et Accès**
- **User Managed Identity** : Créée pour les Web Apps
- **Role Assignments** :
  - Storage Blob Data Contributor sur le Storage Account
  - Key Vault Secrets User sur le Key Vault
  - PostgreSQL flexible server connect sur la base

#### **Réseau**
- **HTTPS uniquement** sur tous les services
- **CORS** configuré pour autoriser le frontend
- **Firewall PostgreSQL** : Accès limité aux Web Apps Azure

## **Plan d'Exécution**

### **1. Provisioning Infrastructure et Déploiement**

#### **1.1. Génération des fichiers IaC**
- Récupérer les règles IaC avec l'outil `iac-rules-get`
- Générer les fichiers Bicep pour toutes les ressources Azure
- Valider la syntaxe avec `get_errors`

#### **1.2. Déploiement avec Azure Developer CLI**
- Exécuter `azd up` pour provisionner et déployer
- Vérifier la création de chaque ressource
- Contrôler les outputs du déploiement

#### **1.3. Validation Post-Déploiement**
- Vérifier les logs applicatifs avec `azd-app-log-get`
- Tester les endpoints API
- Valider la connectivité base de données

### **2. Configuration DNS et Domaine**

#### **2.1. Configuration Azure DNS**
- Créer la zone DNS pour cipfaro.fr
- Configurer les enregistrements A/CNAME vers Application Gateway
- Valider la résolution DNS

#### **2.2. Certificat SSL**
- Configurer le certificat SSL automatique
- Forcer HTTPS sur tous les endpoints
- Tester la sécurité TLS

### **3. Monitoring et Validation**

#### **3.1. Application Insights**
- Configurer les alertes de performance
- Valider la collecte de métriques
- Tester les dashboards

#### **3.2. Tests de Production**
- Tests de charge sur les endpoints
- Validation des fonctionnalités SCORM
- Tests d'authentification JWT

## **Variables d'Environnement Production**

### **Frontend (Web App)**
```bash
NEXT_PUBLIC_API_BASE_URL=https://api.cipfaro.fr
NEXT_PUBLIC_GITHUB_URL=https://github.com/cipfarorudy/cipfaro-elearning
NODE_ENV=production
```

### **Backend (API)**
```bash
NODE_ENV=production
PORT=80
DATABASE_URL=<from-key-vault>
JWT_SECRET=<from-key-vault>
S3_ENDPOINT=<azure-storage-endpoint>
S3_BUCKET=cipfaro-scorm
CORS_ORIGIN=https://cipfaro.fr
```

## **Estimation des Ressources**

### **Coûts Approximatifs Mensuels (EUR)**
- **Web App Service P1V3** : ~70€
- **Web App Service P2V3** : ~140€
- **PostgreSQL Flexible Server** : ~80€
- **Storage Account** : ~5€
- **Application Gateway** : ~25€
- **DNS Zone** : ~0.50€
- **Application Insights** : ~10€

**Total estimé** : ~330€/mois

### **Performance Attendue**
- **Frontend** : 100+ utilisateurs simultanés
- **API** : 50+ req/sec avec base de données
- **Stockage** : Illimité pour packages SCORM
- **Disponibilité** : 99.9% SLA

## **Prochaines Étapes**

1. ✅ Exécuter `azd init` pour initialiser le projet
2. ✅ Générer les fichiers Bicep IaC
3. ✅ Configurer les variables d'environnement
4. ✅ Déployer avec `azd up`
5. ✅ Configurer le DNS cipfaro.fr
6. ✅ Valider le déploiement complet